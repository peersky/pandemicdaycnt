{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","PanDate","Date","HoursDisplay","MinutesDisplay","SecondsDisplay","mSecondsDisplay","today","TimeTodayH","getHours","TimeTodayM","getMinutes","HoursToDisplay","MinutesToDisplay","SecondsToDisplay","getSeconds","mSecondsToDisplay","getMilliseconds","this","setState","document","title","getTimings","intervalID","setInterval","bind","shareUrl","DisplayTime","setHours","setMinutes","setSeconds","className","differenceInCalendarDays","toLocaleTimeString","FacebookShareButton","url","quote","FacebookIcon","size","round","LinkedinShareButton","LinkedinIcon","RedditShareButton","RedditIcon","TelegramShareButton","TelegramIcon","WhatsappShareButton","WhatsappIcon","TwitterShareButton","TwitterIcon","VKShareButton","VKIcon","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,6SC4I5BC,E,kDAhGb,WAAYC,GACX,IAAD,8BAIE,cAAMA,IACDC,MACL,CACEC,QAAU,IAAIC,KAAK,KAAM,EAAG,GAAI,GAAG,GAAG,IACtCC,aAAc,EACdC,eAAgB,EAChBC,eAAgB,EAChBC,gBAAiB,GAXrB,E,yDAoBE,IAAIC,EAAQ,IAAIL,KAGZM,EAAaC,YAASF,GACtBG,EAAaC,YAAWJ,GAHJ,GAKFC,IAEpBA,GAAY,IANU,GAQFE,IAEpBA,GAAY,IAGd,IAAIE,EAAiBJ,EAdG,GAepBK,EAAmBH,EAdC,GAepBI,EAAmBC,YAAWR,GAC9BS,EAAoBC,YAAgBV,GAExCW,KAAKC,SAAS,CACZhB,aAAeS,EACfR,eAAgBS,EAChBR,eAAgBS,EAChBR,gBAAkBU,M,0CAQpBI,SAASC,MAAQ,sBACjBH,KAAKI,aACLJ,KAAKK,WAAaC,YAAYN,KAAKI,WAAWG,KAAKP,MAAO,O,+BAK1D,IAAMQ,EAAW,4CACXL,EAAQ,0CAEVM,EAAe,IAAIzB,KAKrB,OAJFyB,EAAYC,SAASV,KAAKlB,MAAMG,cAChCwB,EAAYE,WAAWX,KAAKlB,MAAMI,gBAClCuB,EAAYG,WAAWZ,KAAKlB,MAAMK,gBAG9B,yBAAK0B,UAAU,OACb,4BAAQA,UAAU,cAAlB,oCACiC,6BACjC,yBAAKA,UAAU,SACdC,YAAyB,IAAI9B,KAAQgB,KAAKlB,MAAMC,SADjD,aAEC,IAFD,IAEO0B,EAAYM,qBAFnB,UAKM,6BAEN,yBAAKF,UAAU,SACf,kBAACG,EAAA,EAAD,CAAqBC,IAAKT,EAAUU,MAAOf,GAAO,kBAACgB,EAAA,EAAD,CAAcC,KAAM,GAAIC,OAAO,KACjF,kBAACC,EAAA,EAAD,CAAqBL,IAAKT,EAAUU,MAAOf,GAAO,kBAACoB,EAAA,EAAD,CAAcH,KAAM,GAAIC,OAAO,KACjF,kBAACG,EAAA,EAAD,CAAmBP,IAAKT,EAAUU,MAAOf,GAAO,kBAACsB,EAAA,EAAD,CAAYL,KAAM,GAAIC,OAAO,KAC7E,kBAACK,EAAA,EAAD,CAAqBT,IAAKT,EAAUU,MAAOf,GAAO,kBAACwB,EAAA,EAAD,CAAcP,KAAM,GAAIC,OAAO,KACjF,kBAACO,EAAA,EAAD,CAAqBX,IAAKT,EAAUU,MAAOf,GAAO,kBAAC0B,EAAA,EAAD,CAAcT,KAAM,GAAIC,OAAO,KACjF,kBAACS,EAAA,EAAD,CAAoBb,IAAKT,EAAUU,MAAOf,GAAO,kBAAC4B,EAAA,EAAD,CAAaX,KAAM,GAAIC,OAAO,KAC/E,kBAACW,EAAA,EAAD,CAAef,IAAKT,EAAUU,MAAOf,GAAO,kBAAC8B,EAAA,EAAD,CAAQb,KAAM,GAAIC,OAAO,Y,GAzF7Da,IAAMC,WC7BJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzC,SAAS0C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.be05c919.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n   differenceInCalendarDays,\n   differenceInHours,\n   differenceInMinutes,\n   differenceInSeconds,\n   differenceInMilliseconds,\n   getHours,\n   getMinutes,\n   getSeconds,\n   getMilliseconds,\n\n\n\n\n} from 'date-fns'\n\nimport {\n\n  FacebookIcon,\n  FacebookShareButton,\n  InstapaperIcon,\n  InstapaperShareButton,\n  LinkedinIcon,\n  LinkedinShareButton,\n  RedditIcon,\n  RedditShareButton,\n  TelegramIcon,\n  TelegramShareButton,\n  TwitterIcon,\n  TwitterShareButton,\n  VKIcon,\n  VKShareButton,\n  WhatsappIcon,\n  WhatsappShareButton,\n} from \"react-share\";\n\n\n\nclass App extends React.Component{\n\n\n  constructor(props)\n  {\n\n\n\n    super(props)\n    this.state =\n    {\n      PanDate : new Date(2020, 3, 11, 14,30,30),\n      HoursDisplay: 0,\n      MinutesDisplay: 0,\n      SecondsDisplay: 0,\n      mSecondsDisplay: 0\n    }\n  }\n\n  IntervalID\n\n  getTimings()\n  {\n\n    let today = new Date()\n    const WhoAnnouncedAtH = 14\n    const WhoAnnouncedAtM = 30\n    let TimeTodayH = getHours(today)\n    let TimeTodayM = getMinutes(today)\n\n    if (WhoAnnouncedAtH > TimeTodayH)\n    {\n      TimeTodayH+=24\n    }\n    if (WhoAnnouncedAtM > TimeTodayM)\n    {\n      TimeTodayM+=60\n    }\n\n    let HoursToDisplay = TimeTodayH-WhoAnnouncedAtH\n    let MinutesToDisplay = TimeTodayM-WhoAnnouncedAtM\n    let SecondsToDisplay = getSeconds(today)\n    let mSecondsToDisplay = getMilliseconds(today)\n\n    this.setState({\n      HoursDisplay : HoursToDisplay,\n      MinutesDisplay: MinutesToDisplay,\n      SecondsDisplay: SecondsToDisplay,\n      mSecondsDisplay : mSecondsToDisplay\n    })\n\n\n  }\n\n  componentDidMount()\n  {\n    document.title = \"Pandemy day counter\"\n    this.getTimings()\n    this.intervalID = setInterval(this.getTimings.bind(this), 500);\n  }\n\n  render()\n  {\n    const shareUrl = 'https://peersky.github.io/pandemicdaycnt/';\n    const title = 'See how long we are in state of Pandemy';\n\n    let DisplayTime  = new Date()\n    DisplayTime.setHours(this.state.HoursDisplay)\n    DisplayTime.setMinutes(this.state.MinutesDisplay)\n    DisplayTime.setSeconds(this.state.SecondsDisplay)\n\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n          State of Pandemy is already for: <br/>\n          <div className=\"clock\">\n          {differenceInCalendarDays(new Date(), this.state.PanDate)}  days and\n          {\" \"} {DisplayTime.toLocaleTimeString()} Hours\n          </div>\n\n                <br/>\n\n          <div className=\"Media\">\n          <FacebookShareButton url={shareUrl} quote={title}><FacebookIcon size={32} round={true} /></FacebookShareButton>\n          <LinkedinShareButton url={shareUrl} quote={title}><LinkedinIcon size={32} round={true} /></LinkedinShareButton>\n          <RedditShareButton url={shareUrl} quote={title}><RedditIcon size={32} round={true} /></RedditShareButton>\n          <TelegramShareButton url={shareUrl} quote={title}><TelegramIcon size={32} round={true} /></TelegramShareButton>\n          <WhatsappShareButton url={shareUrl} quote={title}><WhatsappIcon size={32} round={true} /></WhatsappShareButton>\n          <TwitterShareButton url={shareUrl} quote={title}><TwitterIcon size={32} round={true} /></TwitterShareButton>\n          <VKShareButton url={shareUrl} quote={title}><VKIcon size={32} round={true} /></VKShareButton>\n          </div>\n          </header>\n\n\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}